#!/usr/bin/env python
import time
import roslib; roslib.load_manifest('ur_driver')
import rospy
import actionlib
from control_msgs.msg import *
from trajectory_msgs.msg import *
from sensor_msgs.msg import Joy
from markers import *
from lab2functions import *

class Joystick(object):

    def __init__(self):
        self.axes = 6*[0.,]
        self.buttons = 6*[0.,]
        rospy.Subscriber("/joy", Joy, self.callback)

    def callback(self, msg):
        self.axes = msg.axes
        self.buttons = msg.buttons




if __name__ == '__main__':
    
    rospy.init_node("test1", disable_signals=True)

    
    robot_client = actionlib.SimpleActionClient('follow_joint_trajectory',FollowJointTrajectoryAction) #Conectarse servidor

    joystick = Joystick() #Para configurar Joystick
    print "Waiting for server..."
    robot_client.wait_for_server()
    print "Connected to server"

    joint_names = ['shoulder_pan_joint', 'shoulder_lift_joint', 'elbow_joint','wrist_1_joint', 'wrist_2_joint', 'wrist_3_joint']
    Q0 = [0.0, -1.0, 1.7, -2.2, -1.6, 0.0]

    g = FollowJointTrajectoryGoal()
    g.trajectory = JointTrajectory()
    g.trajectory.joint_names = joint_names

    # Initial position
    g.trajectory.points = [ JointTrajectoryPoint(positions=Q0, velocities=[0]*6, time_from_start=rospy.Duration(2.0))]
    robot_client.send_goal(g)
    robot_client.wait_for_result()
    rospy.sleep(1)
    
    xd=[0.94, 0.125, 0.249] #Valor deseado

    # Initial configuration
    #q0 = [0.0, -1.0, 1.7, -2.2, -1.6, 0.0]

    #bandera
    flag = False


    rate = rospy.Rate(100)
    while not rospy.is_shutdown():
        robot_client.cancel_goal()

        # Modification of the motion
        #Q0[0] = Q0[0]-0.005

	x=joystick.axes[0]
	y=joystick.axes[1]
	z=joystick.axes[2]  
		
	if z>0:	#El valor por default del Z en el joystick es 1
		z = z - 1
	else:
		z = z + 1

	if( flag == False): #Condicional necesario ya que la Z del Joystick inicia en 1
		if ( z==1):
			z=0
		else:
			flag = True

	x = x / (1000)
	y = y / (1000)
	z = z / (1000)

	xd[0] = xd[0] + x #Actualizar valores de posicion deseada
	xd[1] = xd[1] + y
	xd[2] = xd[2] + z

	#Limites espacio de trabajo
	if xd[0] > 1:
		xd[0]=1	
	if xd[1] > 1:
		xd[1]=1

	if xd[1] > 1:
		xd[1]=1	

	# Inverse kinematics
	q = ikine_ur5(xd, Q0)

	#Limitar articulaciones
	
	if q[1] > 0:
		q[1]=0
	elif q[1] < -3.15:
		q[1] = -3.14
	if q[2] > 1.40:
		q[2]=1.40
	elif q[2] < -1.40:
		q[2] = -1.40
	if q[3] > 1.40:
		q[3]=1.40
	elif q[3] < -1.40:
		q[3] = -1.40
	if q[4] > 0:
		q[4]=0
	elif q[4] < -3.15:
		q[4] = -3.14

	
	
		

	Q0 = q

	# Resulting position (end effector with respect to the base link)
	T = fkine_ur5(q)

        g.trajectory.points = [ JointTrajectoryPoint(positions=q, velocities=[0]*6, time_from_start=rospy.Duration(0.008))]
        robot_client.send_goal(g)
        robot_client.wait_for_result()

        rate.sleep()

    robot_client.cancel_goal()

    
    
