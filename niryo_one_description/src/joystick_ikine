#!/usr/bin/env python

import rospy
from sensor_msgs.msg import JointState
from sensor_msgs.msg import Joy
from markers import *
from funciones import *

class Joystick(object):

    def __init__(self):
        self.axes = 6*[0.,]
        self.buttons = 6*[0.,]
        rospy.Subscriber("/joy", Joy, self.callback)

    def callback(self, msg):
        self.axes = msg.axes
        self.buttons = msg.buttons

rospy.init_node("Ikine")
joystick = Joystick()

# Loop rate (in Hz)
rate = rospy.Rate(100)
pub = rospy.Publisher('joint_states', JointState, queue_size=1000)

bmarker      = BallMarker(color['RED'])
bmarker_des  = BallMarker(color['GREEN'])

# Joint names
jnames=("joint_1","joint_2","joint_3","joint_4","joint_5","joint_6")

#xd=np.array([0.94, 0.125, 0.249]) #Valor deseado
xd = np.array([0.196, 0, 0.423])

# Initial configuration
q0 = np.array([0.0, 1.0, 1.0, 0, -1.6, 0.0])
#bandera
flag = False
# Loop rate (in Hz)
rate = rospy.Rate(100)
# Continuous execution loop
while not rospy.is_shutdown():
    	#Movimiento del Joystick
	x=joystick.axes[0]
	y=joystick.axes[1]
	z=joystick.axes[2]  
		
	if z>0:
		z = z - 1
	else:
		z = z + 1
	if( flag == False):
		if ( z==1):
			z=0
		else:
			flag = True

	x = x / (1000)
	y = y / (1000)
	z = z / (1000)

	xd[0] = xd[0] + x #Actualizar valores de posicion deseada
	xd[1] = xd[1] + y
	xd[2] = xd[2] + z

	#Limitar la posicion deseada
	for i in range(3):
		if xd[i] > 1.5:
			xd[i]=1.5
	# Inverse kinematics
	q = ikine_niryo(xd, q0)
	q0 = q
	# Resulting position (end effector with respect to the base link)
	T = fkine_niryo(q)
	#print('Obtained value:\n', np.round(T,3))

	# Red marker shows the achieved position
	bmarker.xyz(T[0:3,3])
	# Green marker shows the desired position
	bmarker_des.xyz(xd)
	# Objeto (mensaje) de tipo JointState
	jstate = JointState()
	# Asignar valores al mensaje
	jstate.header.stamp = rospy.Time.now()
	jstate.name = jnames
	# Add the head joint value (with value 0) to the joints
	jstate.position = q
        # Current time (needed for ROS)
        jstate.header.stamp = rospy.Time.now()
        # Publish the message
        pub.publish(jstate)
        bmarker.publish()
        bmarker_des.publish()
        # Wait for the next iteration
        rate.sleep()

